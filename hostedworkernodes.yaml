AWSTemplateFormatVersion: 2010-09-09
Parameters:
  WindowsPassword:
    Type: String
    Description: The Administrator password
  InstanceTypeParameter:
    Type: String
    Default: t3.xlarge
    Description: Enter instance size. Default is t3.xlarge.
  AMI:
    Type: String
    Default: ami-04aa9dd58d1277860
    Description: AMI Image
  VpcId:
    Description: The VPC of the worker instances
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: The subnets where workers can be created.
    Type: List<AWS::EC2::Subnet::Id>
  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String
  ClusterControlPlaneSecurityGroup:
    Description: The security group of the cluster control plane.
    Type: AWS::EC2::SecurityGroup::Id

  NodeImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI id for the Linux node instances.
    Default: ami-0b2ae3c6bda8b5c06
  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 3
  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 20
  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: "--kubelet-extra-args '--register-with-taints=\"os=linux:NoSchedule\"'"
    Type: String

Resources:
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId:
        !Ref VpcId
      Tags:
      - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
        Value: 'owned'

  RDP:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow RDP connections
      GroupId: !Ref NodeSecurityGroup
      CidrIp: '0.0.0.0/0'
      IpProtocol: tcp
      FromPort: 3389
      ToPort: 3389

  SSH:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow RDP connections
      GroupId: !Ref NodeSecurityGroup
      CidrIp: '0.0.0.0/0'
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  NodeAddress0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  AssociateNodePort0:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt NodeAddress0.AllocationId
      NetworkInterfaceId: !Ref Eth0

  NodeAddress1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Depending on how the routing is set up, internet traffic might go out on
  # Eth1. It needs a public address to have internet access.
  AssociateNodePort1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt NodeAddress1.AllocationId
      NetworkInterfaceId: !Ref Eth1

  Eth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0
      GroupSet:
      - Ref: NodeSecurityGroup
      SourceDestCheck: 'true'
      SubnetId: !Select [ 0, !Ref Subnets ]
      Tags:
      - Key: Name
        Value: Interface 0
      - Key: Interface
        Value: eth0

  Eth1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth1
      SourceDestCheck: 'true'
      SubnetId: !Select [ 0, !Ref Subnets ]
      Tags:
      - Key: Name
        Value: Interface 1
      - Key: Interface
        Value: eth1

  Windows:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType:
        Ref: InstanceTypeParameter
      KeyName: DukeLegion
      IamInstanceProfile: !Ref NodeInstanceProfile
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref 'Eth0'
        DeviceIndex: '0'
      - NetworkInterfaceId: !Ref 'Eth1'
        DeviceIndex: '1'
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: "250"
          VolumeType : "io1"
          Iops: "1500"
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          # Based on https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/getting-started-kubernetes-windows#preparing-a-windows-node

          # Set the windows credentials
          $user=[adsi]"WinNT://localhost/Administrator,user"
          $user.SetPassword("${WindowsPassword}")
          $user.SetInfo()

          # Enable TLS12
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          # Disable status bar for downloads
          $progressPreference = 'silentlyContinue'

          # prepare the k8s directory structure
          mkdir c:\k
          mkdir c:\k\cni
          mkdir c:\k\cni\config

          $WindowsVersion="1709"
          # Todo: This needs to be the CIDR of the l2bridge network
          $PodCidr = "10.0.0.0/24"
          # Todo: This needs to be the CIDR of the node
          $clusterCIDR="192.168.128.1/18"
          $KubeDnsSuffix ="svc.cluster.local"
          $KubeDnsServiceIp="10.100.0.10"
          $serviceCIDR="10.100.0.0/16"
          $NetworkMode="L2Bridge"
          $NetworkName="l2bridge"
          $endpointName = "cbr0"
          $vnicName = "vEthernet ($endpointName)"

          $WorkingDir = "c:\k"
          $CNIPath = [Io.path]::Combine($WorkingDir , "cni")
          $CNIConfig = [Io.path]::Combine($CNIPath, "config", "$NetworkMode.conf")

          function Get-PodGateway($podCIDR)
          {
              # Current limitation of Platform to not use .1 ip, since it is reserved
              return $podCIDR.substring(0,$podCIDR.lastIndexOf(".")) + ".1"
          }

          function Get-PodEndpointGateway($podCIDR)
          {
              # Current limitation of Platform to not use .1 ip, since it is reserved
              return $podCIDR.substring(0,$podCIDR.lastIndexOf(".")) + ".2"
          }

          function ConvertTo-MaskLength
          {
            param(
              [Parameter(Mandatory = $True, Position = 0)]
              [Net.IPAddress] $SubnetMask
            )
              $Bits = "$($SubnetMask.GetAddressBytes() | % {
                [Convert]::ToString($_, 2)
              } )" -replace "[\s0]"
              return $Bits.Length
          }

          function ConvertTo-DecimalIP
          {
            param(
              [Parameter(Mandatory = $true, Position = 0)]
              [Net.IPAddress] $IPAddress
            )
            $i = 3; $DecimalIP = 0;
            $IPAddress.GetAddressBytes() | % {
              $DecimalIP += $_ * [Math]::Pow(256, $i); $i--
            }

            return [UInt32]$DecimalIP
          }

          function ConvertTo-DottedDecimalIP
          {
            param(
              [Parameter(Mandatory = $true, Position = 0)]
              [Uint32] $IPAddress
            )

              $DottedIP = $(for ($i = 3; $i -gt -1; $i--)
              {
                $Remainder = $IPAddress % [Math]::Pow(256, $i)
                ($IPAddress - $Remainder) / [Math]::Pow(256, $i)
                $IPAddress = $Remainder
              })

              return [String]::Join(".", $DottedIP)
          }

          function Get-MgmtIpAddress()
          {
              $na = Get-NetAdapter | ? Name -Like "vEthernet (Ethernet*"
              return (Get-NetIPAddress -InterfaceAlias $na.ifAlias -AddressFamily IPv4).IPAddress
          }

          function Get-MgmtSubnet
          {
              $na = Get-NetAdapter | ? Name -Like "vEthernet (Ethernet*"
              if (!$na) {
                throw "Failed to find a suitable network adapter, check your network settings."
              }
              $addr = (Get-NetIPAddress -InterfaceAlias $na.ifAlias -AddressFamily IPv4).IPAddress
              $mask = (Get-WmiObject Win32_NetworkAdapterConfiguration | ? InterfaceIndex -eq $($na.ifIndex)).IPSubnet[0]
              $mgmtSubnet = (ConvertTo-DecimalIP $addr) -band (ConvertTo-DecimalIP $mask)
              $mgmtSubnet = ConvertTo-DottedDecimalIP $mgmtSubnet
              return "$mgmtSubnet/$(ConvertTo-MaskLength $mask)"
          }

          function
          Update-CNIConfig($podCIDR)
          {
              $jsonSampleConfig = '{
            "cniVersion": "0.2.0",
            "name": "<NetworkMode>",
            "type": "wincni.exe",
            "master": "Ethernet",
            "capabilities": { "portMappings": true },
            "ipam": {
               "environment": "azure",
               "subnet":"<PODCIDR>",
               "routes": [{
                  "GW":"<PODGW>"
               }]
            },
            "dns" : {
              "Nameservers" : [ "8.8.8.8", "8.8.4.4", "10.100.0.10" ],
              "Search": [ "svc.cluster.local" ]
            },
            "AdditionalArgs" : [
              {
                "Name" : "EndpointPolicy", "Value" : { "Type" : "OutBoundNAT", "ExceptionList": [ "<ClusterCIDR>", "<ServerCIDR>", "<MgmtSubnet>" ] }
              },
              {
                "Name" : "EndpointPolicy", "Value" : { "Type" : "ROUTE", "DestinationPrefix": "<ServerCIDR>", "NeedEncap" : true }
              },
              {
                "Name" : "EndpointPolicy", "Value" : { "Type" : "ROUTE", "DestinationPrefix": "<MgmtIP>/32", "NeedEncap" : true }
              }
            ]
          }'
              #Add-Content -Path $CNIConfig -Value $jsonSampleConfig

              $configJson =  ConvertFrom-Json $jsonSampleConfig
              $configJson.name = $NetworkMode.ToLower()
              $configJson.ipam.subnet=$podCIDR
              $configJson.ipam.routes[0].GW = Get-PodEndpointGateway $podCIDR
              $configJson.dns.Nameservers[2] = $KubeDnsServiceIp
              $configJson.dns.Search[0] = $KubeDnsSuffix

              $configJson.AdditionalArgs[0].Value.ExceptionList[0] = $clusterCIDR
              $configJson.AdditionalArgs[0].Value.ExceptionList[1] = $serviceCIDR
              $configJson.AdditionalArgs[0].Value.ExceptionList[2] = Get-MgmtSubnet

              $configJson.AdditionalArgs[1].Value.DestinationPrefix  = $serviceCIDR
              $configJson.AdditionalArgs[2].Value.DestinationPrefix  = "$(Get-MgmtIpAddress)/32"

              if (Test-Path $CNIConfig) {
                  Clear-Content -Path $CNIConfig
              }

              Write-Host "Generated CNI Config [$configJson]"

              Add-Content -Path $CNIConfig -Value (ConvertTo-Json $configJson -Depth 20)
          }

          # There is a delay until the networking is ready
          while (!$(Test-Connection -ComputerName "google.com" -Quiet)) {
            Start-Sleep 5
          }

          # Install chocolatey
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          # Need a console text editor
          choco install vim -y
          # Need the AWS CLI
          choco install awscli -y
          # 7Zip is useful for extracting TAR files
          choco install 7zip -y

          # Install telnet for debugging
          Install-WindowsFeature -name Telnet-Client

          # Enable HyperV feature
          #Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All
          # Enable bash
          #Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux

          # Set path vars
          $env:Path += ";C:\k;C:\Program Files\Amazon\AWSCLI\;C:\Program Files (x86)\vim\vim80"
          [Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\k;C:\Program Files\Amazon\AWSCLI\;C:\Program Files (x86)\vim\vim80", [EnvironmentVariableTarget]::Machine)

          # Set k8s vars
          $env:KUBECONFIG="C:\k\config"
          [Environment]::SetEnvironmentVariable("KUBECONFIG", "C:\k\config", [EnvironmentVariableTarget]::Machine)

          # Download and extract binaries
          wget https://s3.amazonaws.com/hosted-kubernetes-node-support/kubernetes-node-windows-amd64.tar.gz -o c:\k\kubernetes-node-windows-amd64.tar.gz
          wget https://s3.amazonaws.com/hosted-kubernetes-node-support/aws-iam-authenticator.exe -o c:\k\aws-iam-authenticator.exe
          cd c:\k
          7z x .\kubernetes-node-windows-amd64.tar.gz
          7z x -aoa  -ttar kubernetes-node-windows-amd64.tar
          mv c:\k\kubernetes\node\bin\*.exe c:\k
          rm -recurse -force c:\k\kubernetes

          # Get the CNI plugin
          wget https://s3.amazonaws.com/hosted-kubernetes-node-support/wincni.exe -o c:\k\cni\wincni.exe

          # Get the cluster details
          $clusterEndpoint = & "C:\Program Files\Amazon\AWSCLI\aws" eks describe-cluster --name ${ClusterName} --query cluster.endpoint --output text --region ${AWS::Region}
          $clusterCa = & "C:\Program Files\Amazon\AWSCLI\aws" eks describe-cluster --name ${ClusterName} --query cluster.certificateAuthority.data --output text --region ${AWS::Region}

          # Build the kubectl config file
          Set-Content -Path c:\k\config -Value @"
          apiVersion: v1
          clusters:
          - cluster:
              server: $clusterEndpoint
              certificate-authority-data: $clusterCa
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: aws
            name: aws
          current-context: aws
          kind: Config
          preferences: {}
          users:
          - name: aws
            user:
              exec:
                apiVersion: client.authentication.k8s.io/v1alpha1
                command: aws-iam-authenticator
                args:
                - "token"
                - "-i"
                - "${ClusterName}"
          "@

          # Create the docker file
          Set-Content -Path Dockerfile -Value @"
          FROM microsoft/nanoserver:$WindowsVersion
          CMD cmd /c ping -t localhost
          "@

          # Build the pause image
          docker pull microsoft/windowsservercore:$WindowsVersion
          docker tag microsoft/windowsservercore:$WindowsVersion microsoft/windowsservercore:latest
          cd C:/k/
          docker build -t kubeletwin/pause .

          # Get the second nic details
          $ifIndex = Get-NetAdapter -Name "*" |
            ? {$_.Name -like "Ethernet *"} |
            Sort-Object -Property ifIndex -Descending |
            Select-Object -First 1 -ExpandProperty ifIndex

          $gateway = Get-NetIPConfiguration |
            ? {$_.InterfaceIndex -eq $ifIndex} |
            Select-Object -ExpandProperty IPv4DefaultGateway |
            Select-Object -ExpandProperty NextHop

          # Delete the EC2 Metadata route to the first nic (which will
          # not work after we start adding docker networks). We need to
          # be able to use the metadata API for IAM auth.
          route delete -p 169.254.169.254

          # Direct traffic to the Metadata service via the second nic
          route -p add 169.254.169.254 mask 255.255.255.255 $gateway IF $ifIndex

          # Enable TLS12
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          wget https://raw.githubusercontent.com/Microsoft/SDN/master/Kubernetes/windows/hns.psm1 -o c:\k\hns.psm1
          Import-Module c:\k\hns.psm1

          # The microsoft scripts create a l2bridge network to "trigger a vSwitch creation".
          if(!(Get-HnsNetwork | ? Name -EQ "External"))
          {
              New-HNSNetwork -Type $NetworkMode -AddressPrefix "192.168.255.0/30" -Gateway "192.168.255.1" -Name "External" -Verbose
          }

          $podGW = Get-PodGateway $PodCidr
          $hnsNetwork = Get-HnsNetwork | ? Name -EQ $NetworkMode.ToLower()
          if( !$hnsNetwork )
          {
              $hnsNetwork = New-HNSNetwork -Type $NetworkMode -AddressPrefix $PodCidr -Gateway $podGW -Name $NetworkMode.ToLower() -Verbose
          }

          $podEndpointGW = Get-PodEndpointGateway $PodCidr
          $hnsEndpoint = New-HnsEndpoint -NetworkId $hnsNetwork.Id -Name $endpointName -IPAddress $podEndpointGW -Gateway "0.0.0.0" -Verbose
          Attach-HnsHostEndpoint -EndpointID $hnsEndpoint.Id -CompartmentID 1

          # Setup forwarding
          netsh int ipv4 set int "$vnicName" for=en

          Start-Sleep 10

          # Build the CNI configuration
          # https://kubernetes.io/docs/getting-started-guides/windows/#windows-host-setup has some
          # details on the contents of this file.
          Update-CNIConfig $PodCidr

          # Turn off Firewall to enable pods to talk to service endpoints. (Kubelet should eventually do this)
          # Is this needed? We don't want to expose Octopus server to each other anyway.
          # https://github.com/andyzhangx/Demo/blob/master/acs-engine/deployment/windows/kubeletstart.ps1
          # netsh advfirewall set allprofiles state off

          # The command to start kubelet
          $Hostname = $(& curl -UseBasicParsing http://169.254.169.254/latest/meta-data/local-hostname).Content
          $KubeletCommand = @"
            c:\k\kubelet.exe --hostname-override=$Hostname --v=6 ``
              --pod-infra-container-image=kubeletwin/pause --resolv-conf="" ``
              --allow-privileged=true --enable-debugging-handlers ``
              --cluster-dns=$KubeDnsServiceIp --cluster-domain=cluster.local ``
              --kubeconfig=c:\k\config --hairpin-mode=promiscuous-bridge ``
              --image-pull-progress-deadline=20m --cgroups-per-qos=false ``
              --log-dir=c:\k --logtostderr=false --enforce-node-allocatable="" ``
              --network-plugin=cni --cni-bin-dir="c:\k\cni" --cni-conf-dir "c:\k\cni\config" ``
              --pod-cidr=$PodCidr
          "@

          # Point the kube-proxy to the custom bridge
          $env:KUBE_NETWORK=$NetworkMode.ToLower()
          [Environment]::SetEnvironmentVariable("KUBE_NETWORK", $NetworkMode.ToLower(), [EnvironmentVariableTarget]::Machine)

          # Proxy mode kernelspace fails, but userspace works ok
          $KubeProxyCommand = @"
          `$env:INTERFACE_TO_ADD_SERVICE_IP="$vnicName"
          c:\k\kube-proxy.exe --v=4 --proxy-mode=userspace --hostname-override=$Hostname --kubeconfig=c:\k\config
          "@

          Set-Content -Path c:\k\start-kubelet.ps1 -Value $KubeletCommand
          Set-Content -Path c:\k\start-kube-proxy.ps1 -Value $KubeProxyCommand

          # Manage kubelet as a Windows service
          New-Service `
            -Name "kubelet" `
            -BinaryPathName $KubeletCommand `
            -DisplayName "kubelet" `
            -StartupType Manual `
            -Description "Kubernetes kubelet service"

          # Manage kube-proxy as a Windows service
          New-Service `
            -Name "kube-proxy" `
            -BinaryPathName $KubeProxyCommand `
            -DisplayName "kube-proxy" `
            -StartupType Manual `
            -Description "Kubernetes kube-proxy service"
          </powershell>
      Tags:
      -
        Key: Appplication
        Value: Windows Server
      -
        Key: Domain
        Value: None
      -
        Key: Environment
        Value: Test
      -
        Key: LifeTime
        Value: Transient
      -
        Key: Name
        Value: Kubernete Windows Server Node
      -
        Key: OS
        Value: Windows
      -
        Key: OwnerContact
        Value: "#{Deployer Contact}"
      -
        Key: Purpose
        Value: Support Test Instance
      -
        Key: Source
        Value: CloudForation Script in Octopus Deploy
      -
        Key: scheduler:ec2-startstop
        Value: false

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupMinSize
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier:
        !Ref Subnets
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-${NodeGroupName}-Node"
        PropagateAtLaunch: 'true'
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'owned'
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref NodeImageId
      # The linux instances are only hosting util apps, and so can be small
      # Beware, only certain types of instances work properly
      # See https://github.com/awslabs/amazon-eks-ami/issues/27,
      # https://github.com/awslabs/amazon-eks-ami/issues/47
      InstanceType: "t2.small"
      KeyName: DukeLegion
      SecurityGroups:
      - !Ref NodeSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: !Ref NodeVolumeSize
          VolumeType: gp2
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          set -o xtrace
          /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
          /opt/aws/bin/cfn-signal --exit-code $? \
                   --stack  ${AWS::StackName} \
                   --resource NodeGroup  \
                   --region ${AWS::Region}
Outputs:
  PublicIp:
    Value:
      Fn::GetAtt:
      - Windows
      - PublicIp
    Description: Server's PublicIp Address

  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn